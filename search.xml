<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>微信开发环境搭建（不需要有服务器域名）</title>
    <url>/2020/03/21/wexin/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>对于一个小白和穷逼以及想要开发微信的我来说，服务器和域名先不考虑，也是在百度之中挣扎了许久，站在前人的肩膀上，总结一下免费的微信开发环境搭建，不需要有服务器和域名。</p>
<a id="more"></a>

<h4 id="1-准备一个微信测试号"><a href="#1-准备一个微信测试号" class="headerlink" title="1.准备一个微信测试号"></a>1.准备一个微信测试号</h4><p>1.1 地址： <a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener external nofollow noreferrer">微信公众平台接口测试帐号申请</a>，免注册，方便快捷  </p>
<h4 id="2-搭建微信本地调试环境"><a href="#2-搭建微信本地调试环境" class="headerlink" title="2.搭建微信本地调试环境"></a>2.搭建微信本地调试环境</h4><p>这里是让人比较痛苦的地方，没有服务器和域名就没办法，因为微信用户每次向公众号发起请求时，微信服务器会先接收用户的请求，再转发到服务器上，所以微信服务器需要和我们的服务器进行网络交互，所以必须保证我们服务器外网可以访问到。<br>想要做到本地部署，本地调试代码，要解决的问题就是将内网的部署服务器映射到外网，让微信服务器可以正常访问到，我在这里使用的是第三方软件Ngrok。Ngrok是一个免费的软件Ngrok,使用它我们就可以实现内网穿透,也就是说我们可以将内网的服务器映射到外网给别人访问,这对于我们在本地开发环境中调试微信代码是以及给用户演示一些东西非常快速和有帮助的,因为可以直接使用我们自己的内网的电脑作为服务器。</p>
<p>国内提供Ngrok服务比较好的网站是:<a href="http://natapp.cn/" target="_blank" rel="noopener external nofollow noreferrer">http://natapp.cn/</a></p>
<ul>
<li>下载：<img src="/images/article/weixin/natapp01.png" alt=""></li>
<li>将下载的包解压:<img src="/images/article/weixin/natapp02.png" alt=""></li>
<li>添加配置文件config.ini,可以<a href="https://natapp.cn/article/config_ini" target="_blank" rel="noopener external nofollow noreferrer">在这里下载配置文件</a>，根据操作系统下载不同的config.ini文件，放到刚才下载的natapp.exe同级目录<br><img src="/images/article/weixin/natapp03.png" alt=""><br>配置文件内容如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将本文件放置于natapp同级目录 程序将读取 [default] 段</span><br><span class="line">#在命令行参数模式如 natapp -authtoken&#x3D;xxx 等相同参数将会覆盖掉此配置</span><br><span class="line">#命令行参数 -config&#x3D; 可以指定任意config.ini文件</span><br><span class="line">[default]</span><br><span class="line">authtoken&#x3D;                      #对应一条隧道的authtoken</span><br><span class="line">clienttoken&#x3D;                    #对应客户端的clienttoken,将会忽略authtoken,若无请留空,</span><br><span class="line">log&#x3D;none                        #log 日志文件,可指定本地文件, none&#x3D;不做记录,stdout&#x3D;直接屏幕输出 ,默认为none</span><br><span class="line">loglevel&#x3D;ERROR                  #日志等级 DEBUG, INFO, WARNING, ERROR 默认为 DEBUG</span><br><span class="line">http_proxy&#x3D;                     #代理设置 如 http:&#x2F;&#x2F;10.123.10.10:3128 非代理上网用户请务必留空</span><br></pre></td></tr></table></figure>
其中的第一行authtoken要写值的，先放着，我们去注册获取</li>
<li>获取authtoken<br>进入这里注册：<a href="https://natapp.cn/register" target="_blank" rel="noopener external nofollow noreferrer">https://natapp.cn/register</a><br><img src="/images/article/weixin/natapp04.png" alt=""></li>
</ul>
<p>进入”购买隧道-免费隧道”<br><img src="/images/article/weixin/natapp05.png" alt=""></p>
<p>填写成以下这样就可以啦<br><img src="/images/article/weixin/natapp06.png" alt=""></p>
<p>进入”我的隧道”,可以看到authtoken<br><img src="/images/article/weixin/natapp07.png" alt=""></p>
<p>然后将获取到的authtoken写入config.ini文件就好啦，(其他地方都不填)，然后保存</p>
<ul>
<li><p>windows下,直接双击natapp.exe 即可.<br>在Linux/Mac 下 需要先给执行权限<code>chmod a+x natapp</code><br>然后再运行<code>./natapp</code></p>
</li>
<li><p>运行成功都可以得到以下界面：<br><img src="/images/article/weixin/natapp08.png" alt=""></p>
</li>
<li><p>将natapp分配的网址(上图框出来的那个 ),鼠标选定然后复制下来(选定之后单击鼠标右键),在浏览器中访问,可以看到内网穿透成功了!<br><img src="/images/article/weixin/natapp09.png" alt=""></p>
<p>该网址  <a href="http://me7ypi.natappfree.cc就是可以全球访问的网址,可以发给您的小伙伴试试" target="_blank" rel="noopener external nofollow noreferrer">http://me7ypi.natappfree.cc就是可以全球访问的网址,可以发给您的小伙伴试试</a> :)</p>
<h4 id="3-配置微信"><a href="#3-配置微信" class="headerlink" title="3.配置微信"></a>3.配置微信</h4><p>在1中我们不是注册了微信测试号嘛，但是还是需要配置一些东西的。<br><img src="/images/article/weixin/natapp10.png" alt=""></p>
<p>开发者还需要通过检验signature对请求进行校验。若确认此次GET请求来自微信服务器，请原样返回echostr参数内容，则接入生效，成为开发者成功，否则接入失败。详情可查看<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html" target="_blank" rel="noopener external nofollow noreferrer">官网文档地址</a></p>
</li>
<li><p>3.1配置路由<code>routes/web.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&#39;&#x2F;wechat-verify&#39;, &#39;WechatController@connectWechat&#39;);</span><br></pre></td></tr></table></figure></li>
<li><p>3.2 供微信验证开发者身份的控制器文件<code>app/Http/Controllers/WechatController.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line">define(&#39;TOKEN&#39;, &#39;123456&#39;); &#x2F;&#x2F;Token要和在微信配置的一样</span><br><span class="line">class WechatController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 自定义方法，用于微信访问验证开发者身份</span><br><span class="line">     *</span><br><span class="line">     * @param Request $request</span><br><span class="line">     * @return array|null|string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function connectWechat(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        $signature &#x3D; $request-&gt;input(&#39;signature&#39;);</span><br><span class="line">        $timestamp &#x3D; $request-&gt;input(&#39;timestamp&#39;);</span><br><span class="line">        $nonce &#x3D; $request-&gt;input(&#39;nonce&#39;);</span><br><span class="line">        $echoStr &#x3D; $request-&gt;input(&#39;echostr&#39;);</span><br><span class="line">        if ($this-&gt;checkSignature($signature, $timestamp, $nonce)) &#123;</span><br><span class="line">            return $echoStr;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &#39;Token verification failed.&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 微信官方提供的验签方法</span><br><span class="line">     *</span><br><span class="line">     * @param $signature</span><br><span class="line">     * @param $timestamp</span><br><span class="line">     * @param $nonce</span><br><span class="line">     * @return bool</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private function checkSignature($signature, $timestamp, $nonce)</span><br><span class="line">    &#123;</span><br><span class="line">        $token &#x3D; TOKEN;</span><br><span class="line">        $tmpArr &#x3D; array($token, $timestamp, $nonce);</span><br><span class="line">        sort($tmpArr, SORT_STRING);</span><br><span class="line">        $tmpStr &#x3D; implode($tmpArr);</span><br><span class="line">        $tmpStr &#x3D; sha1($tmpStr);</span><br><span class="line"></span><br><span class="line">        if ($tmpStr &#x3D;&#x3D; $signature) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>3.3 添加csrf白名单 <code>app\Http\Middleware\VerifyCsrfToken.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected $except &#x3D; [</span><br><span class="line">    &quot;wechat-verify&quot;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li>
<li><p>3.4 到微信公众号去填写参数并提交验证<br><img src="/images/article/weixin/natapp11.png" alt=""></p>
</li>
<li><p>3.5 over</p>
</li>
</ul>
]]></content>
      <categories>
        <category>微信</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql无限极分类01-递归方式</title>
    <url>/2020/03/21/mysql/Mysql%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<ul>
<li>无限极分类：有时候需要保存一些树形的数据结构，这些数据存在一种递归关系，每个类别都有对应的父类和子类，其子类又有子类，一层一层存储分类。</li>
<li>应用场景：商品分类，评论及回复，组织架构，知识管理等。</li>
<li>实现方式：实现无限极分类有很多种方式，需要根据具体的情况进行选择。<a id="more"></a>

</li>
</ul>
<h4 id="表中记录每个节点的父节点（这个也是往往想到的第一个解决方案）"><a href="#表中记录每个节点的父节点（这个也是往往想到的第一个解决方案）" class="headerlink" title="表中记录每个节点的父节点（这个也是往往想到的第一个解决方案）"></a>表中记录每个节点的父节点（这个也是往往想到的第一个解决方案）</h4><ul>
<li>表结构<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tree&#96; (</span><br><span class="line">  &#96;id&#96; bigint(10) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(64) NOT NULL,</span><br><span class="line">  &#96;parent_id&#96; bigint(10) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;utf8mb4;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>给里面填充了一些数据，如下：<br><img src="/images/article/mysql/tree-table01.png" alt=""></p>
</li>
<li><p>1.查找所有的子类和其父类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	child.id,</span><br><span class="line">	child.name name,</span><br><span class="line">	parent.id  parent_id,</span><br><span class="line">	parent.name  parent_name</span><br><span class="line">FROM</span><br><span class="line">	tree AS child</span><br><span class="line">	LEFT JOIN tree AS parent ON child.parent_id &#x3D; parent.id;</span><br></pre></td></tr></table></figure>
<p><img src="/images/article/mysql/tree-query01.png" alt=""></p>
</li>
<li><p>2.查找某个分类id所有子类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public function tree()&#123;</span><br><span class="line">     $data &#x3D; Tree::all();</span><br><span class="line">     $result &#x3D; $this-&gt;getChildren($data);</span><br><span class="line">     return $result;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> function getChildren($data, $parentId &#x3D; 0)&#123;</span><br><span class="line">    &#x2F;&#x2F; 将查出来的数据循环构造树形结构</span><br><span class="line">    $result &#x3D; [];</span><br><span class="line">    foreach ($data as $key &#x3D;&gt; $val)&#123;</span><br><span class="line">        if($parentId &#x3D;&#x3D;&#x3D; $val[&#39;parent_id&#39;])&#123;</span><br><span class="line">            unset($data[$key]);</span><br><span class="line">            $val[&#39;children&#39;] &#x3D; $this-&gt;getChildren($data, $val[&#39;id&#39;]);</span><br><span class="line">            $result[] &#x3D; $val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">	&quot;id&quot;: 1,</span><br><span class="line">	&quot;parent_id&quot;: 0,</span><br><span class="line">	&quot;name&quot;: &quot;cate01&quot;,</span><br><span class="line">	&quot;children&quot;: [&#123;</span><br><span class="line">		&quot;id&quot;: 2,</span><br><span class="line">		&quot;parent_id&quot;: 1,</span><br><span class="line">		&quot;name&quot;: &quot;cate02&quot;,</span><br><span class="line">		&quot;children&quot;: [&#123;</span><br><span class="line">			&quot;id&quot;: 4,</span><br><span class="line">			&quot;parent_id&quot;: 2,</span><br><span class="line">			&quot;name&quot;: &quot;cate04&quot;,</span><br><span class="line">			&quot;children&quot;: []</span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		&quot;id&quot;: 3,</span><br><span class="line">		&quot;parent_id&quot;: 1,</span><br><span class="line">		&quot;name&quot;: &quot;cate03&quot;,</span><br><span class="line">		&quot;children&quot;: []</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li>
<li><p>3.获取某个分类id下的所有的分类id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getChildrenIds($data, $parentId &#x3D; 0)&#123;</span><br><span class="line">    static $ids &#x3D; [];</span><br><span class="line">    foreach ($data as $key &#x3D;&gt; $val)&#123;</span><br><span class="line">        if($parentId &#x3D;&#x3D;&#x3D; $val[&#39;parent_id&#39;])&#123;</span><br><span class="line">            $ids[] &#x3D; $val[&#39;id&#39;];</span><br><span class="line">            unset($data[$key]);</span><br><span class="line">            $this-&gt;getChildrenIds($data, $val[&#39;id&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $ids;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>4.获取某个分类id所有的父类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getParent($data, $id)&#123;</span><br><span class="line">    $result &#x3D; [];</span><br><span class="line">    foreach ($data as $key &#x3D;&gt; $val)&#123;</span><br><span class="line">        if($val[&#39;id&#39;] &#x3D;&#x3D;&#x3D; $id)&#123;</span><br><span class="line">            $val[&#39;parent&#39;] &#x3D; $this-&gt;getParent($data, $val[&#39;parent_id&#39;]);</span><br><span class="line">            $result[] &#x3D; $val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查找出id = 4的父类数据如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">	&quot;id&quot;: 4,</span><br><span class="line">	&quot;parent_id&quot;: 2,</span><br><span class="line">	&quot;name&quot;: &quot;cate04&quot;,</span><br><span class="line">	&quot;parent&quot;: [&#123;</span><br><span class="line">		&quot;id&quot;: 2,</span><br><span class="line">		&quot;parent_id&quot;: 1,</span><br><span class="line">		&quot;name&quot;: &quot;cate02&quot;,</span><br><span class="line">		&quot;parent&quot;: [&#123;</span><br><span class="line">			&quot;id&quot;: 1,</span><br><span class="line">			&quot;parent_id&quot;: 0,</span><br><span class="line">			&quot;name&quot;: &quot;cate01&quot;,</span><br><span class="line">			&quot;parent&quot;: []</span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>加入购物车</title>
    <url>/2020/03/10/js/%E5%8A%A0%E5%85%A5%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    <content><![CDATA[<h3 id="加入购物车流程："><a href="#加入购物车流程：" class="headerlink" title="加入购物车流程："></a>加入购物车流程：</h3><p>如果第一次添加，建立cookie存储数据<br>如果不是，则判断之前是否添加过该商品，是：数量+1，不是：新增商品数据</p>
<a id="more"></a>
<h3 id="存储的数据格式"><a href="#存储的数据格式" class="headerlink" title="存储的数据格式"></a>存储的数据格式</h3><p>存储商品id和数量,转为json字符串形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;product_id: 1, quantity: 2&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 给加入购物车按钮，添加点击操作</span><br><span class="line">$(&#39;#app div&#39;).on(&#39;click&#39;,&#39;.add-cart-btn&#39;, function()&#123;</span><br><span class="line">    &#x2F;&#x2F; 获取当前点击加入购物车按钮，商品id</span><br><span class="line">    &#x2F;&#x2F; 存储的数据结构[&#123;id, 1, quantity: 2&#125;, &#123;id: 2, quantity: 1&#125;], 转成json格式的字符串存储在cookie中</span><br><span class="line">    var id &#x3D; this.id;</span><br><span class="line">    &#x2F;&#x2F; 1.判断是否是第一次添加</span><br><span class="line">    var first &#x3D; $.cookie(&#39;products&#39;) &#x3D;&#x3D; null;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 2.如果是第一次添加</span><br><span class="line">    if(first)&#123;</span><br><span class="line">        &#x2F;&#x2F;直接创建cookie</span><br><span class="line">        var cookieArr &#x3D; [&#123;id: id, quantity: 1&#125;];</span><br><span class="line">        $.cookie(&#39;products&#39;, JSON.stringfy(cookieArr), &#123;expires: 7&#125;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F; 3.该商品之前是否添加过</span><br><span class="line">        var same &#x3D; false; &#x2F;&#x2F;假设没有添加过</span><br><span class="line">        var cookieArr &#x3D; JSON.parse($.cookie(&#39;products&#39;));</span><br><span class="line">        for(var i &#x3D; 0; i &lt; cookieArr.length; i++)&#123;</span><br><span class="line">            if(cookieArr[i].id &#x3D;&#x3D;&#x3D; id)&#123;</span><br><span class="line">                &#x2F;&#x2F; 之前有添加过这个商品</span><br><span class="line">                cookieArr[i].quantity ++;</span><br><span class="line">                same &#x3D; true;</span><br><span class="line">                break;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if(!same)&#123;</span><br><span class="line">            &#x2F;&#x2F;没有添加过</span><br><span class="line">            var obj &#x3D; &#123;id: id, quantity: 1&#125;;</span><br><span class="line">            cookieArr.push(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;最后，存回cookie中</span><br><span class="line">        $.cookie(&#39;products&#39;, JSON.stringfy(cookieArr), &#123;expires: 7&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
</search>
